{
  "timestamp": "20250415-170412",
  "filename": "php.zip",
  "php": "// File: add.php\n<html>\n<head>\n\t<title>Add Data</title>\n</head>\n\n<body>\n\t<h2>Add Data</h2>\n\t<p>\n\t\t<a href=\"index.php\">Home</a>\n\t</p>\n\n\t<form action=\"addAction.php\" method=\"post\" name=\"add\">\n\t\t<table width=\"25%\" border=\"0\">\n\t\t\t<tr> \n\t\t\t\t<td>Name</td>\n\t\t\t\t<td><input type=\"text\" name=\"name\"></td>\n\t\t\t</tr>\n\t\t\t<tr> \n\t\t\t\t<td>Age</td>\n\t\t\t\t<td><input type=\"text\" name=\"age\"></td>\n\t\t\t</tr>\n\t\t\t<tr> \n\t\t\t\t<td>Email</td>\n\t\t\t\t<td><input type=\"text\" name=\"email\"></td>\n\t\t\t</tr>\n\t\t\t<tr> \n\t\t\t\t<td></td>\n\t\t\t\t<td><input type=\"submit\" name=\"submit\" value=\"Add\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t</form>\n</body>\n</html>\n\n\n\n\n// File: addAction.php\n<html>\n<head>\n\t<title>Add Data</title>\n</head>\n\n<body>\n<?php\n// Include the database connection file\nrequire_once(\"dbConnection.php\");\n\nif (isset($_POST['submit'])) {\n\t// Escape special characters in string for use in SQL statement\t\n\t$name = mysqli_real_escape_string($mysqli, $_POST['name']);\n\t$age = mysqli_real_escape_string($mysqli, $_POST['age']);\n\t$email = mysqli_real_escape_string($mysqli, $_POST['email']);\n\t\t\n\t// Check for empty fields\n\tif (empty($name) || empty($age) || empty($email)) {\n\t\tif (empty($name)) {\n\t\t\techo \"<font color='red'>Name field is empty.</font><br/>\";\n\t\t}\n\t\t\n\t\tif (empty($age)) {\n\t\t\techo \"<font color='red'>Age field is empty.</font><br/>\";\n\t\t}\n\t\t\n\t\tif (empty($email)) {\n\t\t\techo \"<font color='red'>Email field is empty.</font><br/>\";\n\t\t}\n\t\t\n\t\t// Show link to the previous page\n\t\techo \"<br/><a href='javascript:self.history.back();'>Go Back</a>\";\n\t} else { \n\t\t// If all the fields are filled (not empty) \n\n\t\t// Insert data into database\n\t\t$result = mysqli_query($mysqli, \"INSERT INTO users (`name`, `age`, `email`) VALUES ('$name', '$age', '$email')\");\n\t\t\n\t\t// Display success message\n\t\techo \"<p><font color='green'>Data added successfully!</p>\";\n\t\techo \"<a href='index.php'>View Result</a>\";\n\t}\n}\n?>\n</body>\n</html>\n\n\n\n// File: dbConnection.php\n<?php\n$databaseHost = 'localhost';\n$databaseName = 'test';\n$databaseUsername = 'root';\n$databasePassword = 'root';\n\n// Open a new connection to the MySQL server\n$mysqli = mysqli_connect($databaseHost, $databaseUsername, $databasePassword, $databaseName); \n\n\n\n// File: delete.php\n<?php\n// Include the database connection file\nrequire_once(\"dbConnection.php\");\n\n// Get id parameter value from URL\n$id = $_GET['id'];\n\n// Delete row from the database table\n$result = mysqli_query($mysqli, \"DELETE FROM users WHERE id = $id\");\n\n// Redirect to the main display page (index.php in our case)\nheader(\"Location:index.php\");\n\n\n\n// File: edit.php\n<?php\n// Include the database connection file\nrequire_once(\"dbConnection.php\");\n\n// Get id from URL parameter\n$id = $_GET['id'];\n\n// Select data associated with this particular id\n$result = mysqli_query($mysqli, \"SELECT * FROM users WHERE id = $id\");\n\n// Fetch the next row of a result set as an associative array\n$resultData = mysqli_fetch_assoc($result);\n\n$name = $resultData['name'];\n$age = $resultData['age'];\n$email = $resultData['email'];\n?>\n<html>\n<head>\t\n\t<title>Edit Data</title>\n</head>\n\n<body>\n    <h2>Edit Data</h2>\n    <p>\n\t    <a href=\"index.php\">Home</a>\n    </p>\n\t\n\t<form name=\"edit\" method=\"post\" action=\"editAction.php\">\n\t\t<table border=\"0\">\n\t\t\t<tr> \n\t\t\t\t<td>Name</td>\n\t\t\t\t<td><input type=\"text\" name=\"name\" value=\"<?php echo $name; ?>\"></td>\n\t\t\t</tr>\n\t\t\t<tr> \n\t\t\t\t<td>Age</td>\n\t\t\t\t<td><input type=\"text\" name=\"age\" value=\"<?php echo $age; ?>\"></td>\n\t\t\t</tr>\n\t\t\t<tr> \n\t\t\t\t<td>Email</td>\n\t\t\t\t<td><input type=\"text\" name=\"email\" value=\"<?php echo $email; ?>\"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><input type=\"hidden\" name=\"id\" value=<?php echo $id; ?>></td>\n\t\t\t\t<td><input type=\"submit\" name=\"update\" value=\"Update\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t</form>\n</body>\n</html>\n\n\n\n// File: editAction.php\n<?php\n// Include the database connection file\nrequire_once(\"dbConnection.php\");\n\nif (isset($_POST['update'])) {\n\t// Escape special characters in a string for use in an SQL statement\n\t$id = mysqli_real_escape_string($mysqli, $_POST['id']);\n\t$name = mysqli_real_escape_string($mysqli, $_POST['name']);\n\t$age = mysqli_real_escape_string($mysqli, $_POST['age']);\n\t$email = mysqli_real_escape_string($mysqli, $_POST['email']);\t\n\t\n\t// Check for empty fields\n\tif (empty($name) || empty($age) || empty($email)) {\n\t\tif (empty($name)) {\n\t\t\techo \"<font color='red'>Name field is empty.</font><br/>\";\n\t\t}\n\t\t\n\t\tif (empty($age)) {\n\t\t\techo \"<font color='red'>Age field is empty.</font><br/>\";\n\t\t}\n\t\t\n\t\tif (empty($email)) {\n\t\t\techo \"<font color='red'>Email field is empty.</font><br/>\";\n\t\t}\n\t} else {\n\t\t// Update the database table\n\t\t$result = mysqli_query($mysqli, \"UPDATE users SET `name` = '$name', `age` = '$age', `email` = '$email' WHERE `id` = $id\");\n\t\t\n\t\t// Display success message\n\t\techo \"<p><font color='green'>Data updated successfully!</p>\";\n\t\techo \"<a href='index.php'>View Result</a>\";\n\t}\n}\n\n\n\n// File: index.php\n<?php\n// Include the database connection file\nrequire_once(\"dbConnection.php\");\n\n// Fetch data in descending order (lastest entry first)\n$result = mysqli_query($mysqli, \"SELECT * FROM users ORDER BY id DESC\");\n?>\n\n<html>\n<head>\t\n\t<title>Homepage</title>\n</head>\n\n<body>\n\t<h2>Homepage</h2>\n\t<p>\n\t\t<a href=\"add.php\">Add New Data</a>\n\t</p>\n\t<table width='80%' border=0>\n\t\t<tr bgcolor='#DDDDDD'>\n\t\t\t<td><strong>Name</strong></td>\n\t\t\t<td><strong>Age</strong></td>\n\t\t\t<td><strong>Email</strong></td>\n\t\t\t<td><strong>Action</strong></td>\n\t\t</tr>\n\t\t<?php\n\t\t// Fetch the next row of a result set as an associative array\n\t\twhile ($res = mysqli_fetch_assoc($result)) {\n\t\t\techo \"<tr>\";\n\t\t\techo \"<td>\".$res['name'].\"</td>\";\n\t\t\techo \"<td>\".$res['age'].\"</td>\";\n\t\t\techo \"<td>\".$res['email'].\"</td>\";\t\n\t\t\techo \"<td><a href=\\\"edit.php?id=$res[id]\\\">Edit</a> | \n\t\t\t<a href=\\\"delete.php?id=$res[id]\\\" onClick=\\\"return confirm('Are you sure you want to delete?')\\\">Delete</a></td>\";\n\t\t}\n\t\t?>\n\t</table>\n</body>\n</html>\n\n",
  "migration": "# Converting PHP Code to a Modern Next.js Application\n\nTo convert the provided PHP code into a modern Next.js application, we need to break down the functionality into React components and Next.js API routes. Below is the step-by-step guide to achieve this:\n\n## 1. Project Setup\n\nFirst, set up a new Next.js project if you haven't already:\n\n```bash\nnpx create-next-app@latest my-next-app\ncd my-next-app\n```\n\n## 2. Database Connection\n\nCreate a utility file for database connection using `mysql2` package:\n\n```bash\nnpm install mysql2\n```\n\nCreate a file `lib/db.js`:\n\n```javascript\n// lib/db.js\nimport mysql from 'mysql2/promise';\n\nconst pool = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: 'root',\n  database: 'test',\n});\n\nexport async function query(sql, params) {\n  const [rows] = await pool.execute(sql, params);\n  return rows;\n}\n```\n\n## 3. API Routes\n\nCreate API routes to handle CRUD operations.\n\n### Add Data\n\nCreate `pages/api/add.js`:\n\n```javascript\n// pages/api/add.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    const { name, age, email } = req.body;\n\n    if (!name || !age || !email) {\n      return res.status(400).json({ error: 'All fields are required' });\n    }\n\n    try {\n      await query('INSERT INTO users (name, age, email) VALUES (?, ?, ?)', [name, age, email]);\n      res.status(200).json({ message: 'Data added successfully' });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to add data' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n### Edit Data\n\nCreate `pages/api/edit.js`:\n\n```javascript\n// pages/api/edit.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    const { id, name, age, email } = req.body;\n\n    if (!name || !age || !email) {\n      return res.status(400).json({ error: 'All fields are required' });\n    }\n\n    try {\n      await query('UPDATE users SET name = ?, age = ?, email = ? WHERE id = ?', [name, age, email, id]);\n      res.status(200).json({ message: 'Data updated successfully' });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update data' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n### Delete Data\n\nCreate `pages/api/delete.js`:\n\n```javascript\n// pages/api/delete.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'DELETE') {\n    const { id } = req.query;\n\n    try {\n      await query('DELETE FROM users WHERE id = ?', [id]);\n      res.status(200).json({ message: 'Data deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete data' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n## 4. React Components\n\nCreate React components for the frontend.\n\n### Add Data Component\n\nCreate `pages/add.js`:\n\n```javascript\n// pages/add.js\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\n\nexport default function Add() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [email, setEmail] = useState('');\n  const router = useRouter();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const res = await fetch('/api/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name, age, email }),\n    });\n\n    if (res.ok) {\n      router.push('/');\n    } else {\n      const data = await res.json();\n      alert(data.error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Add Data</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Name:</label>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </div>\n        <div>\n          <label>Age:</label>\n          <input type=\"text\" value={age} onChange={(e) => setAge(e.target.value)} />\n        </div>\n        <div>\n          <label>Email:</label>\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n        </div>\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n}\n```\n\n### Edit Data Component\n\nCreate `pages/edit.js`:\n\n```javascript\n// pages/edit.js\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nexport default function Edit() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [email, setEmail] = useState('');\n  const router = useRouter();\n  const { id } = router.query;\n\n  useEffect(() => {\n    if (id) {\n      fetch(`/api/user?id=${id}`)\n        .then((res) => res.json())\n        .then((data) => {\n          setName(data.name);\n          setAge(data.age);\n          setEmail(data.email);\n        });\n    }\n  }, [id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const res = await fetch('/api/edit', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ id, name, age, email }),\n    });\n\n    if (res.ok) {\n      router.push('/');\n    } else {\n      const data = await res.json();\n      alert(data.error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Edit Data</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Name:</label>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </div>\n        <div>\n          <label>Age:</label>\n          <input type=\"text\" value={age} onChange={(e) => setAge(e.target.value)} />\n        </div>\n        <div>\n          <label>Email:</label>\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n        </div>\n        <button type=\"submit\">Update</button>\n      </form>\n    </div>\n  );\n}\n```\n\n### Homepage Component\n\nCreate `pages/index.js`:\n\n```javascript\n// pages/index.js\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\n\nexport default function Home() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/users')\n      .then((res) => res.json())\n      .then((data) => setData(data));\n  }, []);\n\n  const handleDelete = async (id) => {\n    const res = await fetch(`/api/delete?id=${id}`, {\n      method: 'DELETE',\n    });\n\n    if (res.ok) {\n      setData(data.filter((item) => item.id !== id));\n    } else {\n      const data = await res.json();\n      alert(data.error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Homepage</h2>\n      <Link href=\"/add\">Add New Data</Link>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Email</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item) => (\n            <tr key={item.id}>\n              <td>{item.name}</td>\n              <td>{item.age}</td>\n              <td>{item.email}</td>\n              <td>\n                <Link href={`/edit?id=${item.id}`}>Edit</Link> |\n                <button onClick={() => handleDelete(item.id)}>Delete</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n```\n\n### Fetch User Data\n\nCreate `pages/api/user.js`:\n\n```javascript\n// pages/api/user.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'GET') {\n    const { id } = req.query;\n\n    try {\n      const [user] = await query('SELECT * FROM users WHERE id = ?', [id]);\n      res.status(200).json(user);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch user data' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n### Fetch All Users\n\nCreate `pages/api/users.js`:\n\n```javascript\n// pages/api/users.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'GET') {\n    try {\n      const users = await query('SELECT * FROM users ORDER BY id DESC');\n      res.status(200).json(users);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch users' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n## 5. Running the Application\n\nStart the Next.js development server:\n\n```bash\nnpm run dev\n```\n\nVisit `http://localhost:3000` to see your application in action.\n\n## Summary\n\nThis guide demonstrates how to convert a PHP-based CRUD application into a modern Next.js application. The key steps include setting up the database connection, creating API routes for handling CRUD operations, and building React components for the frontend. This approach leverages Next.js best practices for a clean, modular, and maintainable codebase.",
  "audit": "## Complete Analysis Report\n\n### 1. PHP Application Analysis\nThis PHP application is a basic CRUD (Create, Read, Update, Delete) system for managing user data. It allows users to add, edit, delete, and view user records stored in a MySQL database. The application consists of several PHP files that handle different functionalities such as adding, editing, deleting, and displaying user data.\n\n### 2. Features\n- **Add Data**: Allows users to add new user records.\n- **Edit Data**: Allows users to edit existing user records.\n- **Delete Data**: Allows users to delete user records.\n- **View Data**: Displays a list of all user records.\n\n### 3. Project Structure\nThe project is structured into several PHP files, each serving a specific purpose:\n- `add.php`: Form for adding new user data.\n- `addAction.php`: Handles the form submission for adding new user data.\n- `delete.php`: Handles the deletion of user records.\n- `edit.php`: Form for editing existing user data.\n- `editAction.php`: Handles the form submission for editing user data.\n- `index.php`: Displays a list of all user records.\n- `dbConnection.php`: Contains the database connection code.\n\n### 4. Interface Overview\nThe interface is simple and consists of HTML forms and tables. The main pages are:\n- **Homepage (`index.php`)**: Displays a list of all user records with options to add, edit, or delete records.\n- **Add Data (`add.php`)**: Form for adding new user data.\n- **Edit Data (`edit.php`)**: Form for editing existing user data.\n\n### 5. Interface Components\n- **Forms**: Used for adding and editing user data.\n- **Tables**: Used for displaying user data.\n- **Links**: Used for navigation between different pages.\n\n### 6. Database\nThe application uses a MySQL database to store user data. The database connection is established in the `dbConnection.php` file. The database schema includes a single table named `users` with the following columns:\n- `id`: Primary key, auto-incremented.\n- `name`: User's name.\n- `age`: User's age.\n- `email`: User's email.\n\n### 7. Conclusion\nThis PHP application is a simple yet functional CRUD system for managing user data. It demonstrates basic PHP and MySQL usage, including form handling, database operations, and user interface design. The code is well-structured and easy to understand, making it a good starting point for intermediate PHP developers looking to build more complex applications. However, it lacks advanced features such as input validation, error handling, and security measures, which should be considered for production use.",
  "security": "### Potential Vulnerabilities and Solutions\n\n#### 1. **SQL Injection**\n**Files Affected:** `addAction.php`, `delete.php`, `edit.php`, `editAction.php`, `index.php`\n\n**Description:** SQL injection occurs when an attacker can inject malicious SQL code into a query. This can allow them to manipulate the database, retrieve sensitive information, or even delete data.\n\n**Solution:**\n- Use prepared statements with parameterized queries instead of directly embedding user input into SQL queries.\n\n**Example:**\n```php\n// File: addAction.php\nif (isset($_POST['submit'])) {\n    $name = $_POST['name'];\n    $age = $_POST['age'];\n    $email = $_POST['email'];\n\n    if (empty($name) || empty($age) || empty($email)) {\n        // Handle empty fields\n    } else {\n        $stmt = $mysqli->prepare(\"INSERT INTO users (`name`, `age`, `email`) VALUES (?, ?, ?)\");\n        $stmt->bind_param(\"sis\", $name, $age, $email);\n        $stmt->execute();\n        $stmt->close();\n\n        echo \"<p><font color='green'>Data added successfully!</p>\";\n        echo \"<a href='index.php'>View Result</a>\";\n    }\n}\n```\n\n#### 2. **Cross-Site Scripting (XSS)**\n**Files Affected:** `add.php`, `edit.php`, `index.php`\n\n**Description:** XSS occurs when an attacker can inject malicious scripts into web pages viewed by other users. This can lead to session hijacking, defacement, or theft of sensitive information.\n\n**Solution:**\n- Sanitize and escape user input before displaying it on the web page.\n\n**Example:**\n```php\n// File: index.php\nwhile ($res = mysqli_fetch_assoc($result)) {\n    echo \"<tr>\";\n    echo \"<td>\".htmlspecialchars($res['name']).\"</td>\";\n    echo \"<td>\".htmlspecialchars($res['age']).\"</td>\";\n    echo \"<td>\".htmlspecialchars($res['email']).\"</td>\";\n    echo \"<td><a href=\\\"edit.php?id=\".htmlspecialchars($res['id']).\"\\\">Edit</a> |\n    <a href=\\\"delete.php?id=\".htmlspecialchars($res['id']).\"\\\" onClick=\\\"return confirm('Are you sure you want to delete?')\\\">Delete</a></td>\";\n}\n```\n\n#### 3. **Insecure Direct Object References (IDOR)**\n**Files Affected:** `delete.php`, `edit.php`\n\n**Description:** IDOR occurs when an attacker can access resources they shouldn't have access to by manipulating URL parameters.\n\n**Solution:**\n- Validate and authorize access to resources based on user permissions.\n\n**Example:**\n```php\n// File: delete.php\nif (isset($_GET['id'])) {\n    $id = $_GET['id'];\n    // Validate and authorize access to the resource\n    if (isAuthorizedToDelete($id)) {\n        $stmt = $mysqli->prepare(\"DELETE FROM users WHERE id = ?\");\n        $stmt->bind_param(\"i\", $id);\n        $stmt->execute();\n        $stmt->close();\n    }\n    header(\"Location:index.php\");\n}\n```\n\n#### 4. **Hardcoded Credentials**\n**Files Affected:** `dbConnection.php`\n\n**Description:** Hardcoding database credentials in the source code can expose sensitive information.\n\n**Solution:**\n- Use environment variables or a configuration file that is not included in the version control system.\n\n**Example:**\n```php\n// File: dbConnection.php\n$databaseHost = getenv('DB_HOST');\n$databaseName = getenv('DB_NAME');\n$databaseUsername = getenv('DB_USER');\n$databasePassword = getenv('DB_PASS');\n\n$mysqli = new mysqli($databaseHost, $databaseUsername, $databasePassword, $databaseName);\n```\n\n#### 5. **Lack of Input Validation**\n**Files Affected:** `addAction.php`, `editAction.php`\n\n**Description:** Lack of input validation can lead to unexpected behavior and potential vulnerabilities.\n\n**Solution:**\n- Validate user input to ensure it meets expected formats and constraints.\n\n**Example:**\n```php\n// File: addAction.php\nif (isset($_POST['submit'])) {\n    $name = trim($_POST['name']);\n    $age = (int)$_POST['age'];\n    $email = filter_var($_POST['email'], FILTER_VALIDATE_EMAIL);\n\n    if (empty($name) || empty($age) || empty($email)) {\n        // Handle empty fields\n    } else {\n        // Proceed with database insertion\n    }\n}\n```\n\n### Summary\nBy addressing these vulnerabilities, you can significantly improve the security of your application. Using prepared statements, sanitizing user input, validating access, and securing credentials are essential steps to protect against common web application threats.",
  "tests": "To generate unit tests for the provided Next.js application, we can use a testing framework like Jest along with a library like `supertest` for testing API routes. Below is an example of how you can write unit tests for the API routes and React components.\n\n### 1. Setting Up Jest and Supertest\n\nFirst, install the necessary packages:\n\n```bash\nnpm install --save-dev jest @testing-library/react @testing-library/jest-dom supertest\n```\n\n### 2. Unit Tests for API Routes\n\nCreate a `__tests__` directory in the root of your project and add the following test files:\n\n#### `__tests__/api/add.test.js`\n\n```javascript\nimport { createMocks } from 'node-mocks-http';\nimport handler from '../../pages/api/add';\nimport { query } from '../../lib/db';\n\njest.mock('../../lib/db');\n\ndescribe('/api/add', () => {\n  it('should add data successfully', async () => {\n    query.mockResolvedValueOnce({});\n\n    const { req, res } = createMocks({\n      method: 'POST',\n      body: { name: 'John Doe', age: 30, email: 'john@example.com' },\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(200);\n    expect(JSON.parse(res._getData())).toEqual({ message: 'Data added successfully' });\n  });\n\n  it('should return 400 if fields are missing', async () => {\n    const { req, res } = createMocks({\n      method: 'POST',\n      body: { name: 'John Doe' },\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(400);\n    expect(JSON.parse(res._getData())).toEqual({ error: 'All fields are required' });\n  });\n\n  it('should return 405 if method is not POST', async () => {\n    const { req, res } = createMocks({\n      method: 'GET',\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(405);\n    expect(JSON.parse(res._getData())).toEqual({ error: 'Method not allowed' });\n  });\n});\n```\n\n#### `__tests__/api/edit.test.js`\n\n```javascript\nimport { createMocks } from 'node-mocks-http';\nimport handler from '../../pages/api/edit';\nimport { query } from '../../lib/db';\n\njest.mock('../../lib/db');\n\ndescribe('/api/edit', () => {\n  it('should update data successfully', async () => {\n    query.mockResolvedValueOnce({});\n\n    const { req, res } = createMocks({\n      method: 'POST',\n      body: { id: 1, name: 'John Doe', age: 30, email: 'john@example.com' },\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(200);\n    expect(JSON.parse(res._getData())).toEqual({ message: 'Data updated successfully' });\n  });\n\n  it('should return 400 if fields are missing', async () => {\n    const { req, res } = createMocks({\n      method: 'POST',\n      body: { id: 1, name: 'John Doe' },\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(400);\n    expect(JSON.parse(res._getData())).toEqual({ error: 'All fields are required' });\n  });\n\n  it('should return 405 if method is not POST', async () => {\n    const { req, res } = createMocks({\n      method: 'GET',\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(405);\n    expect(JSON.parse(res._getData())).toEqual({ error: 'Method not allowed' });\n  });\n});\n```\n\n#### `__tests__/api/delete.test.js`\n\n```javascript\nimport { createMocks } from 'node-mocks-http';\nimport handler from '../../pages/api/delete';\nimport { query } from '../../lib/db';\n\njest.mock('../../lib/db');\n\ndescribe('/api/delete', () => {\n  it('should delete data successfully', async () => {\n    query.mockResolvedValueOnce({});\n\n    const { req, res } = createMocks({\n      method: 'DELETE',\n      query: { id: 1 },\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(200);\n    expect(JSON.parse(res._getData())).toEqual({ message: 'Data deleted successfully' });\n  });\n\n  it('should return 405 if method is not DELETE', async () => {\n    const { req, res } = createMocks({\n      method: 'GET',\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(405);\n    expect(JSON.parse(res._getData())).toEqual({ error: 'Method not allowed' });\n  });\n});\n```\n\n#### `__tests__/api/user.test.js`\n\n```javascript\nimport { createMocks } from 'node-mocks-http';\nimport handler from '../../pages/api/user';\nimport { query } from '../../lib/db';\n\njest.mock('../../lib/db');\n\ndescribe('/api/user', () => {\n  it('should fetch user data successfully', async () => {\n    const mockUser = { id: 1, name: 'John Doe', age: 30, email: 'john@example.com' };\n    query.mockResolvedValueOnce([mockUser]);\n\n    const { req, res } = createMocks({\n      method: 'GET',\n      query: { id: 1 },\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(200);\n    expect(JSON.parse(res._getData())).toEqual(mockUser);\n  });\n\n  it('should return 405 if method is not GET', async () => {\n    const { req, res } = createMocks({\n      method: 'POST',\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(405);\n    expect(JSON.parse(res._getData())).toEqual({ error: 'Method not allowed' });\n  });\n});\n```\n\n#### `__tests__/api/users.test.js`\n\n```javascript\nimport { createMocks } from 'node-mocks-http';\nimport handler from '../../pages/api/users';\nimport { query } from '../../lib/db';\n\njest.mock('../../lib/db');\n\ndescribe('/api/users', () => {\n  it('should fetch all users successfully', async () => {\n    const mockUsers = [\n      { id: 1, name: 'John Doe', age: 30, email: 'john@example.com' },\n      { id: 2, name: 'Jane Doe', age: 25, email: 'jane@example.com' },\n    ];\n    query.mockResolvedValueOnce(mockUsers);\n\n    const { req, res } = createMocks({\n      method: 'GET',\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(200);\n    expect(JSON.parse(res._getData())).toEqual(mockUsers);\n  });\n\n  it('should return 405 if method is not GET', async () => {\n    const { req, res } = createMocks({\n      method: 'POST',\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(405);\n    expect(JSON.parse(res._getData())).toEqual({ error: 'Method not allowed' });\n  });\n});\n```\n\n### 3. Unit Tests for React Components\n\nCreate test files for the React components in the `__tests__` directory.\n\n#### `__tests__/add.test.js`\n\n```javascript\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Add from '../pages/add';\nimport { useRouter } from 'next/router';\n\njest.mock('next/router', () => ({\n  useRouter: jest.fn(),\n}));\n\ndescribe('Add Component', () => {\n  it('should render form fields', () => {\n    render(<Add />);\n    expect(screen.getByLabelText('Name:')).toBeInTheDocument();\n    expect(screen.getByLabelText('Age:')).toBeInTheDocument();\n    expect(screen.getByLabelText('Email:')).toBeInTheDocument();\n  });\n\n  it('should submit form data', async () => {\n    const push = jest.fn();\n    useRouter.mockReturnValue({ push });\n\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve({}),\n      })\n    );\n\n    render(<Add />);\n\n    fireEvent.change(screen.getByLabelText('Name:'), { target: { value: 'John Doe' } });\n    fireEvent.change(screen.getByLabelText('Age:'), { target: { value: '30' } });\n    fireEvent.change(screen.getByLabelText('Email:'), { target: { value: 'john@example.com' } });\n    fireEvent.submit(screen.getByRole('button', { name: 'Add' }));\n\n    expect(global.fetch).toHaveBeenCalledWith('/api/add', expect.any(Object));\n    expect(push).toHaveBeenCalledWith('/');\n  });\n});\n```\n\n#### `__tests__/edit.test.js`\n\n```javascript\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Edit from '../pages/edit';\nimport { useRouter } from 'next/router';\n\njest.mock('next/router', () => ({\n  useRouter: jest.fn(),\n}));\n\ndescribe('Edit Component', () => {\n  it('should render form fields', () => {\n    useRouter.mockReturnValue({ query: { id: 1 } });\n\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        json: () => Promise.resolve({ name: 'John Doe', age: 30, email: 'john@example.com' }),\n      })\n    );\n\n    render(<Edit />);\n\n    expect(screen.getByLabelText('Name:')).toBeInTheDocument();\n    expect(screen.getByLabelText('Age:')).toBeInTheDocument();\n    expect(screen.getByLabelText('Email:')).toBeInTheDocument();\n  });\n\n  it('should submit form data', async () => {\n    const push = jest.fn();\n    useRouter.mockReturnValue({ query: { id: 1 }, push });\n\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve({}),\n      })\n    );\n\n    render(<Edit />);\n\n    fireEvent.change(screen.getByLabelText('Name:'), { target: { value: 'John Doe' } });\n    fireEvent.change(screen.getByLabelText('Age:'), { target: { value: '30' } });\n    fireEvent.change(screen.getByLabelText('Email:'), { target: { value: 'john@example.com' } });\n    fireEvent.submit(screen.getByRole('button', { name: 'Update' }));\n\n    expect(global.fetch).toHaveBeenCalledWith('/api/edit', expect.any(Object));\n    expect(push).toHaveBeenCalledWith('/');\n  });\n});\n```\n\n#### `__tests__/index.test.js`\n\n```javascript\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Home from '../pages/index';\n\ndescribe('Home Component', () => {\n  it('should render table with data', () => {\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        json: () => Promise.resolve([\n          { id: 1, name: 'John Doe', age: 30, email: 'john@example.com' },\n          { id: 2, name: 'Jane Doe', age: 25, email: 'jane@example.com' },\n        ]),\n      })\n    );\n\n    render(<Home />);\n\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n    expect(screen.getByText('Jane Doe')).toBeInTheDocument();\n  });\n\n  it('should delete data', async () => {\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve({}),\n      })\n    );\n\n    render(<Home />);\n\n    fireEvent.click(screen.getByText('Delete'));\n\n    expect(global.fetch).toHaveBeenCalledWith('/api/delete?id=1', expect.any(Object));\n  });\n});\n```\n\n### 4. Running the Tests\n\nAdd the following script to your `package.json` to run the tests:\n\n```json\n\"scripts\": {\n  \"test\": \"jest\"\n}\n```\n\nRun the tests using:\n\n```bash\nnpm test\n```\n\nThis setup provides a comprehensive suite of unit tests for the API routes and React components in your Next.js application.",
  "docs": "# Converting PHP Code to a Modern Next.js Application\n\nThis project demonstrates how to convert a PHP-based CRUD application into a modern Next.js application. The key steps include setting up the database connection, creating API routes for handling CRUD operations, and building React components for the frontend.\n\n## Table of Contents\n\n- [Project Setup](#project-setup)\n- [Database Connection](#database-connection)\n- [API Routes](#api-routes)\n  - [Add Data](#add-data)\n  - [Edit Data](#edit-data)\n  - [Delete Data](#delete-data)\n  - [Fetch User Data](#fetch-user-data)\n  - [Fetch All Users](#fetch-all-users)\n- [React Components](#react-components)\n  - [Add Data Component](#add-data-component)\n  - [Edit Data Component](#edit-data-component)\n  - [Homepage Component](#homepage-component)\n- [Running the Application](#running-the-application)\n- [Summary](#summary)\n\n## Project Setup\n\nFirst, set up a new Next.js project if you haven't already:\n\n```bash\nnpx create-next-app@latest my-next-app\ncd my-next-app\n```\n\n## Database Connection\n\nCreate a utility file for database connection using the `mysql2` package:\n\n```bash\nnpm install mysql2\n```\n\nCreate a file `lib/db.js`:\n\n```javascript\n// lib/db.js\nimport mysql from 'mysql2/promise';\n\nconst pool = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: 'root',\n  database: 'test',\n});\n\nexport async function query(sql, params) {\n  const [rows] = await pool.execute(sql, params);\n  return rows;\n}\n```\n\n## API Routes\n\nCreate API routes to handle CRUD operations.\n\n### Add Data\n\nCreate `pages/api/add.js`:\n\n```javascript\n// pages/api/add.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    const { name, age, email } = req.body;\n\n    if (!name || !age || !email) {\n      return res.status(400).json({ error: 'All fields are required' });\n    }\n\n    try {\n      await query('INSERT INTO users (name, age, email) VALUES (?, ?, ?)', [name, age, email]);\n      res.status(200).json({ message: 'Data added successfully' });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to add data' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n### Edit Data\n\nCreate `pages/api/edit.js`:\n\n```javascript\n// pages/api/edit.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    const { id, name, age, email } = req.body;\n\n    if (!name || !age || !email) {\n      return res.status(400).json({ error: 'All fields are required' });\n    }\n\n    try {\n      await query('UPDATE users SET name = ?, age = ?, email = ? WHERE id = ?', [name, age, email, id]);\n      res.status(200).json({ message: 'Data updated successfully' });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update data' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n### Delete Data\n\nCreate `pages/api/delete.js`:\n\n```javascript\n// pages/api/delete.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'DELETE') {\n    const { id } = req.query;\n\n    try {\n      await query('DELETE FROM users WHERE id = ?', [id]);\n      res.status(200).json({ message: 'Data deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete data' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n### Fetch User Data\n\nCreate `pages/api/user.js`:\n\n```javascript\n// pages/api/user.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'GET') {\n    const { id } = req.query;\n\n    try {\n      const [user] = await query('SELECT * FROM users WHERE id = ?', [id]);\n      res.status(200).json(user);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch user data' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n### Fetch All Users\n\nCreate `pages/api/users.js`:\n\n```javascript\n// pages/api/users.js\nimport { query } from '../../lib/db';\n\nexport default async function handler(req, res) {\n  if (req.method === 'GET') {\n    try {\n      const users = await query('SELECT * FROM users ORDER BY id DESC');\n      res.status(200).json(users);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch users' });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n```\n\n## React Components\n\nCreate React components for the frontend.\n\n### Add Data Component\n\nCreate `pages/add.js`:\n\n```javascript\n// pages/add.js\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\n\nexport default function Add() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [email, setEmail] = useState('');\n  const router = useRouter();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const res = await fetch('/api/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name, age, email }),\n    });\n\n    if (res.ok) {\n      router.push('/');\n    } else {\n      const data = await res.json();\n      alert(data.error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Add Data</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Name:</label>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </div>\n        <div>\n          <label>Age:</label>\n          <input type=\"text\" value={age} onChange={(e) => setAge(e.target.value)} />\n        </div>\n        <div>\n          <label>Email:</label>\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n        </div>\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n}\n```\n\n### Edit Data Component\n\nCreate `pages/edit.js`:\n\n```javascript\n// pages/edit.js\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nexport default function Edit() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [email, setEmail] = useState('');\n  const router = useRouter();\n  const { id } = router.query;\n\n  useEffect(() => {\n    if (id) {\n      fetch(`/api/user?id=${id}`)\n        .then((res) => res.json())\n        .then((data) => {\n          setName(data.name);\n          setAge(data.age);\n          setEmail(data.email);\n        });\n    }\n  }, [id]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const res = await fetch('/api/edit', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ id, name, age, email }),\n    });\n\n    if (res.ok) {\n      router.push('/');\n    } else {\n      const data = await res.json();\n      alert(data.error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Edit Data</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Name:</label>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </div>\n        <div>\n          <label>Age:</label>\n          <input type=\"text\" value={age} onChange={(e) => setAge(e.target.value)} />\n        </div>\n        <div>\n          <label>Email:</label>\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n        </div>\n        <button type=\"submit\">Update</button>\n      </form>\n    </div>\n  );\n}\n```\n\n### Homepage Component\n\nCreate `pages/index.js`:\n\n```javascript\n// pages/index.js\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\n\nexport default function Home() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/users')\n      .then((res) => res.json())\n      .then((data) => setData(data));\n  }, []);\n\n  const handleDelete = async (id) => {\n    const res = await fetch(`/api/delete?id=${id}`, {\n      method: 'DELETE',\n    });\n\n    if (res.ok) {\n      setData(data.filter((item) => item.id !== id));\n    } else {\n      const data = await res.json();\n      alert(data.error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Homepage</h2>\n      <Link href=\"/add\">Add New Data</Link>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Email</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item) => (\n            <tr key={item.id}>\n              <td>{item.name}</td>\n              <td>{item.age}</td>\n              <td>{item.email}</td>\n              <td>\n                <Link href={`/edit?id=${item.id}`}>Edit</Link> |\n                <button onClick={() => handleDelete(item.id)}>Delete</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n```\n\n## Running the Application\n\nStart the Next.js development server:\n\n```bash\nnpm run dev\n```\n\nVisit `http://localhost:3000` to see your application in action.\n\n## Summary\n\nThis guide demonstrates how to convert a PHP-based CRUD application into a modern Next.js application. The key steps include setting up the database connection, creating API routes for handling CRUD operations, and building React components for the frontend. This approach leverages Next.js best practices for a clean, modular, and maintainable codebase.",
  "extract_file": "```json\n[\n  { \"file_name\": \"db.js\", \"path\": \"lib/db.js\", \"content\": \"import mysql from 'mysql2/promise';\\n\\nconst pool = mysql.createPool({\\n  host: 'localhost',\\n  user: 'root',\\n  password: 'root',\\n  database: 'test',\\n});\\n\\nexport async function query(sql, params) {\\n  const [rows] = await pool.execute(sql, params);\\n  return rows;\\n}\" },\n  { \"file_name\": \"add.js\", \"path\": \"pages/api/add.js\", \"content\": \"import { query } from '../../lib/db';\\n\\nexport default async function handler(req, res) {\\n  if (req.method === 'POST') {\\n    const { name, age, email } = req.body;\\n\\n    if (!name || !age || !email) {\\n      return res.status(400).json({ error: 'All fields are required' });\\n    }\\n\\n    try {\\n      await query('INSERT INTO users (name, age, email) VALUES (?, ?, ?)', [name, age, email]);\\n      res.status(200).json({ message: 'Data added successfully' });\\n    } catch (error) {\\n      res.status(500).json({ error: 'Failed to add data' });\\n    }\\n  } else {\\n    res.status(405).json({ error: 'Method not allowed' });\\n  }\\n}\" },\n  { \"file_name\": \"edit.js\", \"path\": \"pages/api/edit.js\", \"content\": \"import { query } from '../../lib/db';\\n\\nexport default async function handler(req, res) {\\n  if (req.method === 'POST') {\\n    const { id, name, age, email } = req.body;\\n\\n    if (!name || !age || !email) {\\n      return res.status(400).json({ error: 'All fields are required' });\\n    }\\n\\n    try {\\n      await query('UPDATE users SET name = ?, age = ?, email = ? WHERE id = ?', [name, age, email, id]);\\n      res.status(200).json({ message: 'Data updated successfully' });\\n    } catch (error) {\\n      res.status(500).json({ error: 'Failed to update data' });\\n    }\\n  } else {\\n    res.status(405).json({ error: 'Method not allowed' });\\n  }\\n}\" },\n  { \"file_name\": \"delete.js\", \"path\": \"pages/api/delete.js\", \"content\": \"import { query } from '../../lib/db';\\n\\nexport default async function handler(req, res) {\\n  if (req.method === 'DELETE') {\\n    const { id } = req.query;\\n\\n    try {\\n      await query('DELETE FROM users WHERE id = ?', [id]);\\n      res.status(200).json({ message: 'Data deleted successfully' });\\n    } catch (error) {\\n      res.status(500).json({ error: 'Failed to delete data' });\\n    }\\n  } else {\\n    res.status(405).json({ error: 'Method not allowed' });\\n  }\\n}\" },\n  { \"file_name\": \"add.js\", \"path\": \"pages/add.js\", \"content\": \"import { useState } from 'react';\\nimport { useRouter } from 'next/router';\\n\\nexport default function Add() {\\n  const [name, setName] = useState('');\\n  const [age, setAge] = useState('');\\n  const [email, setEmail] = useState('');\\n  const router = useRouter();\\n\\n  const handleSubmit = async (e) => {\\n    e.preventDefault();\\n\\n    const res = await fetch('/api/add', {\\n      method: 'POST',\\n      headers: {\\n        'Content-Type': 'application/json',\\n      },\\n      body: JSON.stringify({ name, age, email }),\\n    });\\n\\n    if (res.ok) {\\n      router.push('/');\\n    } else {\\n      const data = await res.json();\\n      alert(data.error);\\n    }\\n  };\\n\\n  return (\\n    <div>\\n      <h2>Add Data</h2>\\n      <form onSubmit={handleSubmit}>\\n        <div>\\n          <label>Name:</label>\\n          <input type=\\\"text\\\" value={name} onChange={(e) => setName(e.target.value)} />\\n        </div>\\n        <div>\\n          <label>Age:</label>\\n          <input type=\\\"text\\\" value={age} onChange={(e) => setAge(e.target.value)} />\\n        </div>\\n        <div>\\n          <label>Email:</label>\\n          <input type=\\\"text\\\" value={email} onChange={(e) => setEmail(e.target.value)} />\\n        </div>\\n        <button type=\\\"submit\\\">Add</button>\\n      </form>\\n    </div>\\n  );\\n}\" },\n  { \"file_name\": \"edit.js\", \"path\": \"pages/edit.js\", \"content\": \"import { useState, useEffect } from 'react';\\nimport { useRouter } from 'next/router';\\n\\nexport default function Edit() {\\n  const [name, setName] = useState('');\\n  const [age, setAge] = useState('');\\n  const [email, setEmail] = useState('');\\n  const router = useRouter();\\n  const { id } = router.query;\\n\\n  useEffect(() => {\\n    if (id) {\\n      fetch(`/api/user?id=${id}`)\\n        .then((res) => res.json())\\n        .then((data) => {\\n          setName(data.name);\\n          setAge(data.age);\\n          setEmail(data.email);\\n        });\\n    }\\n  }, [id]);\\n\\n  const handleSubmit = async (e) => {\\n    e.preventDefault();\\n\\n    const res = await fetch('/api/edit', {\\n      method: 'POST',\\n      headers: {\\n        'Content-Type': 'application/json',\\n      },\\n      body: JSON.stringify({ id, name, age, email }),\\n    });\\n\\n    if (res.ok) {\\n      router.push('/');\\n    } else {\\n      const data = await res.json();\\n      alert(data.error);\\n    }\\n  };\\n\\n  return (\\n    <div>\\n      <h2>Edit Data</h2>\\n      <form onSubmit={handleSubmit}>\\n        <div>\\n          <label>Name:</label>\\n          <input type=\\\"text\\\" value={name} onChange={(e) => setName(e.target.value)} />\\n        </div>\\n        <div>\\n          <label>Age:</label>\\n          <input type=\\\"text\\\" value={age} onChange={(e) => setAge(e.target.value)} />\\n        </div>\\n        <div>\\n          <label>Email:</label>\\n          <input type=\\\"text\\\" value={email} onChange={(e) => setEmail(e.target.value)} />\\n        </div>\\n        <button type=\\\"submit\\\">Update</button>\\n      </form>\\n    </div>\\n  );\\n}\" },\n  { \"file_name\": \"index.js\", \"path\": \"pages/index.js\", \"content\": \"import { useEffect, useState } from 'react';\\nimport Link from 'next/link';\\n\\nexport default function Home() {\\n  const [data, setData] = useState([]);\\n\\n  useEffect(() => {\\n    fetch('/api/users')\\n      .then((res) => res.json())\\n      .then((data) => setData(data));\\n  }, []);\\n\\n  const handleDelete = async (id) => {\\n    const res = await fetch(`/api/delete?id=${id}`, {\\n      method: 'DELETE',\\n    });\\n\\n    if (res.ok) {\\n      setData(data.filter((item) => item.id !== id));\\n    } else {\\n      const data = await res.json();\\n      alert(data.error);\\n    }\\n  };\\n\\n  return (\\n    <div>\\n      <h2>Homepage</h2>\\n      <Link href=\\\"/add\\\">Add New Data</Link>\\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Name</th>\\n            <th>Age</th>\\n            <th>Email</th>\\n            <th>Action</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          {data.map((item) => (\\n            <tr key={item.id}>\\n              <td>{item.name}</td>\\n              <td>{item.age}</td>\\n              <td>{item.email}</td>\\n              <td>\\n                <Link href={`/edit?id=${item.id}`}>Edit</Link> |\\n                <button onClick={() => handleDelete(item.id)}>Delete</button>\\n              </td>\\n            </tr>\\n          ))}\\n        </tbody>\\n      </table>\\n    </div>\\n  );\\n}\" },\n  { \"file_name\": \"user.js\", \"path\": \"pages/api/user.js\", \"content\": \"import { query } from '../../lib/db';\\n\\nexport default async function handler(req, res) {\\n  if (req.method === 'GET') {\\n    const { id } = req.query;\\n\\n    try {\\n      const [user] = await query('SELECT * FROM users WHERE id = ?', [id]);\\n      res.status(200).json(user);\\n    } catch (error) {\\n      res.status(500).json({ error: 'Failed to fetch user data' });\\n    }\\n  } else {\\n    res.status(405).json({ error: 'Method not allowed' });\\n  }\\n}\" },\n  { \"file_name\": \"users.js\", \"path\": \"pages/api/users.js\", \"content\": \"import { query } from '../../lib/db';\\n\\nexport default async function handler(req, res) {\\n  if (req.method === 'GET') {\\n    try {\\n      const users = await query('SELECT * FROM users ORDER BY id DESC');\\n      res.status(200).json(users);\\n    } catch (error) {\\n      res.status(500).json({ error: 'Failed to fetch users' });\\n    }\\n  } else {\\n    res.status(405).json({ error: 'Method not allowed' });\\n  }\\n}\" }\n]\n```",
  "integration": "lib/db.js created.\npages/api/add.js created.\npages/api/edit.js created.\npages/api/delete.js created.\npages/add.js created.\npages/edit.js created.\npages/index.js created.\npages/api/user.js created.\npages/api/users.js created.",
  "base_path": "nextjs-migrated-app\\20250415-170356"
}